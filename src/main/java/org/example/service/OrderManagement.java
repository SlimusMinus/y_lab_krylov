package org.example.service;

import org.example.model.Order;

import java.util.List;
import java.util.function.Function;
import java.util.function.Predicate;

/**
 * Интерфейс для управления заказами.
 *
 * <p>Этот интерфейс определяет методы для создания, получения, изменения и удаления заказов, а также для фильтрации заказов
 * по заданным критериям.</p>
 */
public interface OrderManagement {
    /**
     * Создает новый заказ.
     *
     * <p>Этот метод добавляет новый заказ в систему. После вызова метода заказ должен быть сохранен в хранилище.</p>
     *
     * @param order Объект {@link Order}, представляющий новый заказ.
     */
    void create(Order order);

    /**
     * Получает список всех заказов.
     *
     * <p>Этот метод возвращает все заказы, хранящиеся в системе. Список может быть пустым, если нет доступных заказов.</p>
     *
     * @return Список объектов {@link Order}, представляющих все заказы в системе.
     */
    List<Order> getAll();

    /**
     * Получает заказ по идентификатору.
     *
     * <p>Этот метод возвращает заказ, соответствующий указанному идентификатору. Если заказ с таким идентификатором не найден,
     * метод может вернуть {@code null} или выбросить исключение, в зависимости от реализации.</p>
     *
     * @param id Идентификатор заказа, который нужно получить.
     * @return Объект {@link Order}, соответствующий указанному идентификатору, или {@code null}, если заказ не найден.
     */
    Order getById(int id);

    /**
     * Изменяет статус заказа.
     *
     * <p>Этот метод обновляет статус заказа по указанному идентификатору. Новый статус заменяет старый. Метод должен корректно
     * обработать указанный идентификатор и новый статус.</p>
     *
     * @param id Идентификатор заказа, статус которого нужно изменить.
     * @param status Новый статус заказа.
     */
    void changeStatus(int id, String status);

    /**
     * Отменяет заказ по идентификатору.
     *
     * <p>Этот метод помечает заказ как отмененный по указанному идентификатору. После вызова метода заказ должен быть изменен
     * на статус отмены.</p>
     *
     * @param id Идентификатор заказа, который нужно отменить.
     */
    void canceled(int id);

    /**
     * Фильтрует список заказов по заданному критерию.
     *
     * <p>Этот метод позволяет отфильтровать заказы на основе функции получения свойства и предиката для проверки этого свойства.</p>
     *
     * @param <T> Тип свойства, по которому производится фильтрация.
     * @param getter Функция, возвращающая значение свойства {@link Order}, по которому будет происходить фильтрация.
     * @param predicate Предикат, проверяющий, соответствует ли значение свойства заданному условию.
     * @return Список объектов {@link Order}, которые удовлетворяют заданному критерию фильтрации.
     * @throws IllegalArgumentException Если параметры {@code getter} или {@code predicate} являются {@code null}.
     */
    <T> List<Order> filter(Function<Order, T> getter, Predicate<T> predicate);
}
