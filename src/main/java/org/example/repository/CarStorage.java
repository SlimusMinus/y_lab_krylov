package org.example.repository;

import org.example.model.Car;

import java.util.List;
import java.util.function.Function;
import java.util.function.Predicate;
/**
 * Интерфейс для сервиса управления автомобилями.
 *
 * <p>Этот интерфейс определяет методы для получения списка всех автомобилей, сохранения или обновления данных об автомобиле,
 * удаления автомобиля по идентификатору и фильтрации автомобилей по заданным критериям.</p>
 */
public interface CarStorage {
    /**
     * Получает список всех автомобилей.
     *
     * @return Список объектов {@link Car}, представляющих все автомобили в системе.
     */
    List<Car> getAll();

    Car getById(int id);

    /**
     * Сохраняет новый автомобиль или обновляет данные об существующем автомобиле.
     *
     * <p>Если автомобиль с таким же идентификатором уже существует, его данные будут обновлены.
     * Если идентификатор не задан (например, равен 0 или отрицательный), создается новый автомобиль.</p>
     *
     * @param car Объект {@link Car}, содержащий информацию об автомобиле для сохранения или обновления.
     * @return Сохраненный или обновленный объект {@link Car}.
     */
    Car saveOrUpdate(Car car);

    /**
     * Удаляет автомобиль по идентификатору.
     *
     * <p>Удаляет автомобиль из системы по его уникальному идентификатору. Если автомобиль с таким идентификатором не найден,
     * метод может не выполнять никаких действий.</p>
     *
     * @param id Идентификатор автомобиля, который нужно удалить.
     */
    void delete(int id);

    /**
     * Фильтрует список автомобилей по заданному критерию.
     *
     * <p>Этот метод позволяет отфильтровать автомобили на основе функции получения свойства и предиката для проверки этого свойства.</p>
     *
     * @param <T> Тип свойства, по которому производится фильтрация.
     * @param getter Функция, возвращающая значение свойства {@link Car}, по которому будет происходить фильтрация.
     * @param predicate Предикат, проверяющий, соответствует ли значение свойства заданному условию.
     * @return Список объектов {@link Car}, которые удовлетворяют заданному критерию фильтрации.
     */
    <T> List<Car> filter(Function<Car, T> getter, Predicate<T> predicate);
}
